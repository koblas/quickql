
[TestParse/#00 - 1]
quickql.Expr{
  LogicExpr: nil,
}
---

[TestParse/one_two_three - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "one",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "two",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "three",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/FranÃ§ois - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: []string{
                "FranÃ§ois",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/one_ðŸ‡¨ðŸ‡¦_three - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "one",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: []string{
                "ðŸ‡¨ðŸ‡¦",
              },
              VIdentifier: nil,
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "three",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello=world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/country=ðŸ‡¨ðŸ‡¦ - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "country",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "ðŸ‡¨ðŸ‡¦",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello_=_world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello!=world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "!=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello_!=_world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "!=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello<world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "<",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello<=world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "<=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello>world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: ">",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello>=world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: ">=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello_~_world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "~",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello_!~_world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "!~",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "hello",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello_world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "hello",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world_AND_super:cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "super",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world_super:cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "super",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world_AND_super:cool_AND_really:cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "super",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "really",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world_super:cool_really:cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "super",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "really",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:null - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "null",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/foo:*bar - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "foo",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "*bar",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world_OR_super:cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "OR",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "super",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:world_or_cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "or",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/world_OR_super:cool - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "OR",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "super",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "cool",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:66e839032fb119d31dc9c968 - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "66e839032fb119d31dc9c968",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:"super_cool" - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "super cool",
              VValue: nil,
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:66 - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "66",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello:66.2 - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "66.2",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/foo>1_AND_bar<2 - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "foo",
              },
            },
            Op: ">",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "1",
              },
              VIdentifier: nil,
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "bar",
              },
            },
            Op: "<",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "2",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/panic_NOT_ever - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "panic",
                },
              },
            },
          },
          quickql.PNot{
            Expr: quickql.PValue{
              Expr: &quickql.Value{
                VString: "",
                VValue: nil,
                VIdentifier: &quickql.Identifier{
                  Value: []string{
                    "ever",
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/repo:has.commit.after(yesterday) - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "repo",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "has.commit.after",
              },
              VIdentifier: nil,
            },
          },
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PValue{
                        Expr: &quickql.Value{
                          VString: "",
                          VValue: nil,
                          VIdentifier: &quickql.Identifier{
                            Value: []string{
                              "yesterday",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/hello>=3_OR_world<=4.7 - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "hello",
              },
            },
            Op: ">=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "3",
              },
              VIdentifier: nil,
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "OR",
                },
              },
            },
          },
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "world",
              },
            },
            Op: "<=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "4.7",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/(hello>=3)_OR_(world<=4.7) - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "hello",
                          },
                        },
                        Op: ">=",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "3",
                          },
                          VIdentifier: nil,
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "OR",
                },
              },
            },
          },
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "world",
                          },
                        },
                        Op: "<=",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "4.7",
                          },
                          VIdentifier: nil,
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/name_=_"Bill" - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "name",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "Bill",
              VValue: nil,
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/name_eq_"Bill" - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "name",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "eq",
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "Bill",
              VValue: nil,
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/name_=_"Bob"_and_(age_>_20_or_age_<_5) - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "name",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "Bob",
              VValue: nil,
              VIdentifier: nil,
            },
          },
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "age",
                          },
                        },
                        Op: ">",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "20",
                          },
                          VIdentifier: nil,
                        },
                      },
                      quickql.PValue{
                        Expr: &quickql.Value{
                          VString: "",
                          VValue: nil,
                          VIdentifier: &quickql.Identifier{
                            Value: []string{
                              "or",
                            },
                          },
                        },
                      },
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "age",
                          },
                        },
                        Op: "<",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "5",
                          },
                          VIdentifier: nil,
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/name_=_"Bob"_and_(age>20_or_age<5) - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "name",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "Bob",
              VValue: nil,
              VIdentifier: nil,
            },
          },
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "age",
                          },
                        },
                        Op: ">",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "20",
                          },
                          VIdentifier: nil,
                        },
                      },
                      quickql.PValue{
                        Expr: &quickql.Value{
                          VString: "",
                          VValue: nil,
                          VIdentifier: &quickql.Identifier{
                            Value: []string{
                              "or",
                            },
                          },
                        },
                      },
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "age",
                          },
                        },
                        Op: "<",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "5",
                          },
                          VIdentifier: nil,
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/cat!=dog_(_foo>1_AND_bar<2_and_cat=fish)_OR_(_baz<=3_AND_qux>=4_) - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "cat",
              },
            },
            Op: "!=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "dog",
                },
              },
            },
          },
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "foo",
                          },
                        },
                        Op: ">",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "1",
                          },
                          VIdentifier: nil,
                        },
                      },
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "bar",
                          },
                        },
                        Op: "<",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "2",
                          },
                          VIdentifier: nil,
                        },
                      },
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "cat",
                          },
                        },
                        Op: "=",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: nil,
                          VIdentifier: &quickql.Identifier{
                            Value: []string{
                              "fish",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "OR",
                },
              },
            },
          },
          quickql.PParen{
            Expr: &quickql.Expr{
              LogicExpr: &quickql.OrLogicExpr{
                Expr: []*quickql.AndLogicExpr{
                  &quickql.AndLogicExpr{
                    Expr: []quickql.primary{
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "baz",
                          },
                        },
                        Op: "<=",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "3",
                          },
                          VIdentifier: nil,
                        },
                      },
                      quickql.PExpr{
                        Field: &quickql.Identifier{
                          Value: []string{
                            "qux",
                          },
                        },
                        Op: ">=",
                        Value: &quickql.Value{
                          VString: "",
                          VValue: []string{
                            "4",
                          },
                          VIdentifier: nil,
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestSmoke - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "bar",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "*back",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/obj.prop=world - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: []string{
                "obj.prop",
              },
              VIdentifier: nil,
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: []string{
                "=",
              },
              VIdentifier: nil,
            },
          },
          quickql.PValue{
            Expr: &quickql.Value{
              VString: "",
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---

[TestParse/foo:*bar* - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "foo",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "*bar*",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/foo:bar* - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: &quickql.Identifier{
              Value: []string{
                "foo",
              },
            },
            Op: "=",
            Value: &quickql.Value{
              VString: "",
              VValue: []string{
                "bar*",
              },
              VIdentifier: nil,
            },
          },
        },
      },
    },
  },
}
---

[TestParse/-hello:77 - 1]
quickql.Expr{
  LogicExpr: &quickql.OrLogicExpr{
    Expr: []*quickql.AndLogicExpr{
      &quickql.AndLogicExpr{
        Expr: []quickql.primary{
          quickql.PNot{
            Expr: quickql.PExpr{
              Field: &quickql.Identifier{
                Value: []string{
                  "hello",
                },
              },
              Op: "=",
              Value: &quickql.Value{
                VString: "",
                VValue: []string{
                  "77",
                },
                VIdentifier: nil,
              },
            },
          },
        },
      },
    },
  },
}
---
