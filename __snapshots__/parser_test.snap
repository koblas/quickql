
[TestParse/#00 - 1]

---

[TestParse/one_two_three - 1]
(and (keyword one) (keyword two) (keyword three))
---

[TestParse/FranÃ§ois - 1]
(keyword FranÃ§ois)
---

[TestParse/one_ðŸ‡¨ðŸ‡¦_three - 1]
(and (keyword one) (keyword ðŸ‡¨ðŸ‡¦) (keyword three))
---

[TestParse/hello:world - 1]
(= hello "world")
---

[TestParse/hello=world - 1]
(= hello "world")
---

[TestParse/country=ðŸ‡¨ðŸ‡¦ - 1]
(= country "ðŸ‡¨ðŸ‡¦")
---

[TestParse/hello_=_world - 1]
(= hello "world")
---

[TestParse/hello!=world - 1]
(!= hello "world")
---

[TestParse/obj.prop=world - 1]
(= obj.prop "world")
---

[TestParse/hello_!=_world - 1]
(!= hello "world")
---

[TestParse/hello<world - 1]
(< hello "world")
---

[TestParse/hello<=world - 1]
(<= hello "world")
---

[TestParse/hello>world - 1]
(> hello "world")
---

[TestParse/hello>=world - 1]
(>= hello "world")
---

[TestParse/hello_~_world - 1]
(~ hello "world")
---

[TestParse/hello_!~_world - 1]
(!~ hello "world")
---

[TestParse/hello - 1]
(keyword hello)
---

[TestParse/hello_world - 1]
(and (keyword hello) (keyword world))
---

[TestParse/hello:world_AND_super:cool - 1]
(and (= hello "world") (= super "cool"))
---

[TestParse/hello:world_super:cool - 1]
(and (= hello "world") (= super "cool"))
---

[TestParse/hello:world_AND_super:cool_AND_really:cool - 1]
(and (= hello "world") (= super "cool") (= really "cool"))
---

[TestParse/hello:world_super:cool_really:cool - 1]
(and (= hello "world") (= super "cool") (= really "cool"))
---

[TestParse/hello:null - 1]
(= hello "null")
---

[TestParse/foo:*bar - 1]
(= foo "*bar")
---

[TestParse/foo:*bar* - 1]
(= foo "*bar*")
---

[TestParse/foo:bar* - 1]
(= foo "bar*")
---

[TestParse/hello:world_OR_super:cool - 1]
(or (= hello "world") (= super "cool"))
---

[TestParse/hello:world_or_cool - 1]
(or (= hello "world") (keyword cool))
---

[TestParse/world_OR_super:cool - 1]
(or (keyword world) (= super "cool"))
---

[TestParse/hello:66e839032fb119d31dc9c968 - 1]
(= hello "66e839032fb119d31dc9c968")
---

[TestParse/hello:"super_cool" - 1]
(= hello "super cool")
---

[TestParse/-hello:77 - 1]
(NOT (= hello "77"))
---

[TestParse/hello:66 - 1]
(= hello "66")
---

[TestParse/hello:66.2 - 1]
(= hello "66.2")
---

[TestParse/foo>1_AND_bar<2 - 1]
(and (> foo "1") (< bar "2"))
---

[TestParse/panic_NOT_ever - 1]
(and (keyword panic) (NOT (keyword ever)))
---

[TestParse/repo:has.commit.after(yesterday) - 1]
(and (= repo "has.commit.after") (keyword yesterday))
---

[TestParse/hello>=3_OR_world<=4.7 - 1]
(or (>= hello "3") (<= world "4.7"))
---

[TestParse/(hello>=3)_OR_(world<=4.7) - 1]
(or (>= hello "3") (<= world "4.7"))
---

[TestParse/name_=_"Bill" - 1]
(= name "Bill")
---

[TestParse/name_eq_"Bill" - 1]
(and (keyword name) (keyword eq) (keyword Bill))
---

[TestParse/name_=_"Bob"_and_(age_>_20_or_age_<_5) - 1]
(and (= name "Bob") (or (> age "20") (< age "5")))
---

[TestParse/name_=_"Bob"_and_(age>20_or_age<5) - 1]
(and (= name "Bob") (or (> age "20") (< age "5")))
---

[TestParse/cat!=dog_(_foo>1_AND_bar<2_and_cat=fish)_OR_(_baz<=3_AND_qux>=4_) - 1]
(and (!= cat "dog") (or (and (> foo "1") (< bar "2") (= cat "fish")) (and (<= baz "3") (>= qux "4"))))
---

[TestSmoke - 1]
quickql.Expr{
  LogicExpr: &quickql.AndLogicExpr{
    Expr: []quickql.OrLogicExpr{
      quickql.OrLogicExpr{
        Expr: []quickql.primary{
          quickql.PExpr{
            Field: quickql.Identifier{
              Value: []string{
                "obj.prop",
              },
            },
            Op: "=",
            Value: quickql.Value{
              VString: nil,
              VValue: nil,
              VIdentifier: &quickql.Identifier{
                Value: []string{
                  "world",
                },
              },
            },
          },
        },
      },
    },
  },
}
---
